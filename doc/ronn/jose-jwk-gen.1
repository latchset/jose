.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "JOSE\-JWK\-GEN" "1" "July 2019" "" ""
.
.SH "NAME"
\fBjose\-jwk\-gen\fR \- Creates a random JWK for each input JWK template
.
.SH "SYNOPSIS"
\fBjose jwk gen\fR \-i JWK [\-o JWK]
.
.SH "OVERVIEW"
The \fBjose jwk gen\fR command generates a key from one or more JWK(Set) templates\. If a single template is given as input, a single JWK will be output\. However, if multiple templates are given as input, a single JWKSet will be output containing all the keys\.
.
.P
The best way to generate a key is to specify the algorithm it will be used with in the "alg" property of the JWK template\. This method should be preferred since, when generating from an algorithm, an appropriate "key_ops" parameter will be emitted automatically\. Further, having a JWK with the algorithm already specified will assist algorithm inference when encrypting or signing\.
.
.P
Alternatively, you can generate a key by specifying its key type ("kty") JWK property, along with the required type\-specific generation parameter\. See the examples below for how to do this for each key type\. If the type\-specific generation parameter is non\-standard (for example: "bytes" and "bits"), it will be removed excluded from the output\.
.
.SH "OPTIONS"
.
.TP
\fB\-i\fR \fIJSON\fR, \fB\-\-input\fR=\fIJSON\fR
Parse JWK(Set) template from JSON
.
.TP
\fB\-i\fR \fIFILE\fR, \fB\-\-input\fR=\fIFILE\fR
Read JWK(Set) template from FILE
.
.TP
\fB\-i\fR \-, \fB\-\-input\fR=\-
Read JWK(Set) template from standard input
.
.TP
\fB\-o\fR \fIFILE\fR, \fB\-\-output\fR=\fIFILE\fR
Write JWK(Set) to FILE
.
.TP
\fB\-o\fR \-, \fB\-\-output\fR=\-
Write JWK(Set) to standard input
.
.TP
\fB\-s\fR, \fB\-\-set\fR
Always output a JWKSet
.
.SH "EXAMPLES"
Generate three keys, each targeting a different algorithm:
.
.IP "" 4
.
.nf

$ jose jwk gen \-i \(cq{"alg":"HS256"}\(cq \-o oct\.jwk
$ jose jwk gen \-i \(cq{"alg":"RS256"}\(cq \-o rsa\.jwk
$ jose jwk gen \-i \(cq{"alg":"ES256"}\(cq \-o ec\.jwk
.
.fi
.
.IP "" 0
.
.P
Generate three keys using key parameters rather than algorithms:
.
.IP "" 4
.
.nf

$ jose jwk gen \-i \(cq{"kty":"oct","bytes":32}\(cq \-o oct\.jwk
$ jose jwk gen \-i \(cq{"kty":"RSA","bits":4096}\(cq \-o rsa\.jwk
$ jose jwk gen \-i \(cq{"kty":"EC","crv":"P\-256"}\(cq \-o ec\.jwk
.
.fi
.
.IP "" 0
.
.P
Create multiple keys at once using a JWKSet template:
.
.IP "" 4
.
.nf

$ jose jwk gen \e
  \-i \(cq{"keys":[{"alg":"HS256"},{"alg":"ES256"}]}\(cq \e
  \-o keys\.jwkset
.
.fi
.
.IP "" 0
.
.P
Create multiple keys at once using multiple JWK templates:
.
.IP "" 4
.
.nf

$ jose jwk gen \e
  \-i \(cq{"alg":"HS256"}\(cq \e
  \-i \(cq{"alg":"ES256"}\(cq \e
  \-o keys\.jwkset
.
.fi
.
.IP "" 0
.
.SH "AUTHOR"
Nathaniel McCallum <npmccallum@redhat\.com>
.
.SH "SEE ALSO"
\fBjose\-alg\fR(1), \fBjose\-jwe\-dec\fR(1), \fBjose\-jwe\-enc\fR(1), \fBjose\-jwk\-exc\fR(1), \fBjose\-jwk\-pub\fR(1), \fBjose\-jwk\-thp\fR(1), \fBjose\-jwk\-use\fR(1), \fBjose\-jws\-sig\fR(1), \fBjose\-jws\-ver\fR(1),
