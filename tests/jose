#!/bin/bash -x

ASIGN="RS256 RS384 RS512 ES256 ES384 ES512 PS256 PS384 PS512"
SSIGN="HS256 HS384 HS512"
AWRAP="ECDH-ES ECDH-ES+A128KW ECDH-ES+A192KW ECDH-ES+A256KW RSA1_5"
SWRAP="A128KW A192KW A256KW A128GCMKW A192GCMKW A256GCMKW"
SENCR="A128CBC-HS256 A192CBC-HS384 A256CBC-HS512 A128GCM A192GCM A256GCM"

if tests/rsa_oaep; then
    AWRAP="$AWRAP RSA-OAEP RSA-OAEP-256"
fi

tmpdir=`mktemp -d`

function onexit() {
    rm -rf $tmpdir
}

trap exit ERR
trap onexit EXIT

echo hi > $tmpdir/msg.txt

##
### Generate a key for every supported algorithm
##

for alg in $ASIGN $SSIGN $AWRAP $SWRAP $SENCR; do
    echo "{ \"alg\": \"$alg\" }" | cmd/jose gen -t- -o $tmpdir/$alg.jwk
    cat $tmpdir/$alg.jwk
    echo ""
done

##
### Generate a key for each parameter
##

cmd/jose gen -t '{ "kty": "EC", "crv": "P-256" }'
cmd/jose gen -t '{ "kty": "EC", "crv": "P-384" }'
cmd/jose gen -t '{ "kty": "EC", "crv": "P-521" }'

cmd/jose gen -t '{ "kty": "RSA", "bits": 3072 }'
cmd/jose gen -t '{ "kty": "RSA", "bits": 3072, "e": 257 }'
cmd/jose gen -t '{ "kty": "RSA", "bits": 3072, "e": "AQE" }'

cmd/jose gen -t '{ "kty": "oct", "bytes": 32 }'

##
### Test publicize...
##

# ... on some synthetic keys ...
ioct='{"kty":"oct","k":"","a":"foo","key_ops":["encrypt","decrypt"]}'
irsa='{"kty":"RSA","p":"","d":"","q":"","dp":"","dq":"","qi":"","oth":"","a":"bar","key_ops":["encrypt","decrypt"]}'
iec='{"kty":"EC","d":"","a":"baz","key_ops":["encrypt","decrypt"]}'
ijwkset="{\"keys\":[$ioct,$irsa,$iec]}"
ooct='{"a":"foo","key_ops":[],"kty":"oct"}'
orsa='{"a":"bar","key_ops":["encrypt"],"kty":"RSA"}'
oec='{"a":"baz","key_ops":["encrypt"],"kty":"EC"}'
ojwkset="{\"keys\":[$ooct,$orsa,$oec]}"
test "`echo $ioct    | cmd/jose pub -i-`" == "$ooct"
test "`echo $irsa    | cmd/jose pub -i-`" == "$orsa"
test "`echo $iec     | cmd/jose pub -i-`" == "$oec"
test "`echo $ijwkset | cmd/jose pub -i-`" == "$ojwkset"

# ... and all generated keys.
for alg in $ASIGN $SSIGN $AWRAP $SWRAP $SENCR; do
    cmd/jose pub -i $tmpdir/$alg.jwk -o $tmpdir/$alg.jwk.pub
    cat $tmpdir/$alg.jwk.pub
    echo ""

    cat $tmpdir/$alg.jwk | cmd/jose pub -i-
done

##
### Test exchange
##

cmd/jose gen -t '{ "kty": "EC", "crv": "P-256" }' -o $tmpdir/exc_a.jwk
cmd/jose gen -t '{ "kty": "EC", "crv": "P-256" }' -o $tmpdir/exc_b.jwk
cmd/jose pub -i $tmpdir/exc_a.jwk -o $tmpdir/exc_a.pub.jwk
cmd/jose pub -i $tmpdir/exc_b.jwk -o $tmpdir/exc_b.pub.jwk
a=`cmd/jose exc -l $tmpdir/exc_a.jwk -r $tmpdir/exc_b.pub.jwk`
b=`cmd/jose exc -l $tmpdir/exc_b.jwk -r $tmpdir/exc_a.pub.jwk`
test "$a" == "$b"
! cmd/jose exc -l $tmpdir/exc_a.pub.jwk -r $tmpdir/exc_b.jwk
! cmd/jose exc -l $tmpdir/exc_b.pub.jwk -r $tmpdir/exc_a.jwk
! cmd/jose exc -l $tmpdir/exc_a.pub.jwk -r $tmpdir/exc_b.pub.jwk
! cmd/jose exc -l $tmpdir/exc_b.pub.jwk -r $tmpdir/exc_a.pub.jwk

cmd/jose gen -t '{ "kty": "EC", "crv": "P-384" }' -o $tmpdir/exc_c.jwk
! cmd/jose exc -l $tmpdir/exc_c.jwk -r $tmpdir/exc_a.pub.jwk

cmd/jose gen -t '{ "alg": "ES256" }' -o $tmpdir/exc_d.jwk
! cmd/jose exc -l $tmpdir/exc_d.jwk -r $tmpdir/exc_a.pub.jwk

##
### Test signature creation on each signature algorithm
##

for alg in $ASIGN $SSIGN; do
    cmd/jose sig -i $tmpdir/msg.txt -o $tmpdir/$alg.jws -k $tmpdir/$alg.jwk
    cat $tmpdir/$alg.jws
    echo ""
done

##
### Test verification
##

for alg in $ASIGN $SSIGN; do
    cmd/jose ver -i $tmpdir/$alg.jws -k $tmpdir/$alg.jwk
done

##
### Test encryption
##

for alg in $AWRAP $SWRAP; do
    for enc in $SENCR; do
        cmd/jose enc \
            -t "{\"protected\":{\"enc\":\"$enc\"}}" \
            -i $tmpdir/msg.txt \
            -o $tmpdir/$enc.$alg.jwe \
            -k $tmpdir/$alg.jwk
    done
done

##
### Test decryption
##

for alg in $AWRAP $SWRAP; do
    for enc in $SENCR; do
        cmd/jose dec -i $tmpdir/$enc.$alg.jwe -k $tmpdir/$alg.jwk
    done
done

##
### Test supported algorithms
##
cmd/jose sup

